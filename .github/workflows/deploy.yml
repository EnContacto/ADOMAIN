name: Deploy to EC2 on main push

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ztencontacto/my-project
  VERSION: 3.3
  DOCKER_COMPOSE_FILE: docker-compose.yml

jobs:
  setup:
    name: Setup Docker and Docker Compose
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Docker and Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker.io
          DOCKER_COMPOSE_VERSION=2.22.0
          sudo curl -L "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose version

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Build Docker images with correct tags
        run: |
          docker-compose -f $DOCKER_COMPOSE_FILE build

          docker tag ztencontacto/my-project:sendmessage-latest $IMAGE_NAME:sendmessage-latest
          docker tag ztencontacto/my-project:getmessages-latest $IMAGE_NAME:getmessages-latest
          docker tag ztencontacto/my-project:deletemessage-latest $IMAGE_NAME:deletemessage-latest

  push-to-dockerhub:
    name: Push Images to Docker Hub
    runs-on: ubuntu-latest
    needs: build-images

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push Docker images
        run: |
          docker push $IMAGE_NAME:sendmessage-latest
          docker push $IMAGE_NAME:getmessages-latest
          docker push $IMAGE_NAME:deletemessage-latest

  deploy-to-ec2:
    name: Deploy to AWS EC2
    runs-on: ubuntu-latest
    needs: push-to-dockerhub

    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_INSTANCE_IP }} >> ~/.ssh/known_hosts

      - name: SSH into EC2 and Deploy
        run: |
          ssh ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_INSTANCE_IP }} << 'EOF'
          set -e

          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            echo "Installing Docker..."
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl enable docker
            sudo systemctl start docker
          fi

          # Install Docker Compose (Latest Version) if not installed
          if ! command -v docker-compose &> /dev/null; then
            echo "Installing Docker Compose..."
            DOCKER_COMPOSE_VERSION=2.22.0
            sudo curl -L "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi

          # Pull the latest Docker images
          echo "Pulling the latest Docker images..."
          sudo docker pull ${{ env.IMAGE_NAME }}:sendmessage-latest
          sudo docker pull ${{ env.IMAGE_NAME }}:getmessages-latest
          sudo docker pull ${{ env.IMAGE_NAME }}:deletemessage-latest

          # Stop and remove existing containers
          echo "Stopping and removing old containers..."
          sudo docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} down

          # Run new containers with updated images
          echo "Starting new deployment..."
          AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
          AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }} \
          AWS_REGION="us-east-1" \
          DYNAMODB_TABLE="Messages" \
          sudo docker-compose -f ${{ env.DOCKER_COMPOSE_FILE }} up -d --force-recreate
          EOF
