name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: myproject
  DOCKER_HUB_USER: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_HUB_PASS: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  # Step 1: Set Image Version
  set-version:
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ steps.get_version.outputs.new_version }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Current Version and Increment
        id: get_version
        run: |
          latest_version=$(curl -s "https://hub.docker.com/v2/repositories/${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}/tags" | jq -r '.results[].name' | grep -E '^[0-9]+\.[0-9]+$' | sort -V | tail -n 1)
          if [[ -z "$latest_version" ]]; then
            new_version="3.3"
          else
            new_version=$(echo "$latest_version + 0.1" | bc)
          fi
          echo "New version: $new_version"
          echo "new_version=$new_version" >> $GITHUB_ENV

  # Step 2: Build and Push Docker Image
  build-and-push:
    runs-on: ubuntu-latest
    needs: set-version
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        run: echo "${{ env.DOCKER_HUB_PASS }}" | docker login -u "${{ env.DOCKER_HUB_USER }}" --password-stdin

      - name: Build Docker Image
        run: docker build -t ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.new_version }} .

      - name: Push Docker Image
        run: docker push ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.new_version }}

  # Step 3: Deploy to AWS EC2
  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_PRIVATE_KEY }}" > ~/.ssh/aws_ec2.pem
          chmod 600 ~/.ssh/aws_ec2.pem

      - name: Connect to EC2 and Deploy
        run: |
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/aws_ec2.pem ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
          # Install Docker if not installed
          if ! command -v docker &> /dev/null; then
            sudo apt update
            sudo apt install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
          fi

          # Pull the latest image
          docker pull ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.new_version }}

          # Stop and remove any existing container
          docker rm -f myproject-container || true

          # Run the new container
          docker run -d --name myproject-container -p 3001:3001 -p 3002:3002 -p 3003:3003 ${{ env.DOCKER_HUB_USER }}/${{ env.IMAGE_NAME }}:${{ env.new_version }}
          EOF
