name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build_and_push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push SendMessage Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:sendmessage-latest ./sendmessage
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:sendmessage-latest

      - name: Build and Push GetMessages Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:getmessages-latest ./getmessages
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:getmessages-latest

      - name: Build and Push DeleteMessage Image
        run: |
          docker build --no-cache -t ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:deletemessage-latest ./deletemessage
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:deletemessage-latest

  deploy_ec2:
    name: Deploy on EC2
    runs-on: ubuntu-latest
    needs: build_and_push

    steps:
      - name: Set up SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.EC2_PUBLIC_IP }} >> ~/.ssh/known_hosts

      - name: Deploy Docker Containers on EC2
        run: |
          ssh -i ~/.ssh/id_rsa ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'
            echo "Stopping and removing existing containers if running..."
            RUNNING_CONTAINERS=$(sudo docker ps -q)
            if [ ! -z "$RUNNING_CONTAINERS" ]; then
              sudo docker stop $RUNNING_CONTAINERS
              sudo docker rm $RUNNING_CONTAINERS
            fi

            echo "Pulling latest Docker images..."
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:sendmessage-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:getmessages-latest
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:deletemessage-latest

            echo "Setting persistent environment variables..."
            echo "export AWS_ACCESS_KEY_ID='${{ secrets.AWS_ACCESS_KEY_ID }}'" | sudo tee -a /etc/environment
            echo "export AWS_SECRET_ACCESS_KEY='${{ secrets.AWS_SECRET_ACCESS_KEY }}'" | sudo tee -a /etc/environment
            echo "export AWS_REGION='us-east-1'" | sudo tee -a /etc/environment
            echo "export DYNAMODB_TABLE='MessagesTable'" | sudo tee -a /etc/environment
            echo "export S3_BUCKET='your-s3-bucket-name'" | sudo tee -a /etc/environment

            source /etc/environment

            echo "Verifying stored environment variables..."
            env | grep AWS_

            echo "Running containers with the latest images..."
            sudo docker run -d -p 3001:3000 --name sendmessage \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:sendmessage-latest

            sudo docker run -d -p 3002:3000 --name getmessages \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:getmessages-latest

            sudo docker run -d -p 3003:3000 --name deletemessage \
              --restart always \
              -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
              -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
              -e AWS_REGION="$AWS_REGION" \
              -e DYNAMODB_TABLE="$DYNAMODB_TABLE" \
              -e S3_BUCKET="$S3_BUCKET" \
              ${{ secrets.DOCKERHUB_USERNAME }}/test-communication:deletemessage-latest

            echo "Deployment complete!"
          EOF
